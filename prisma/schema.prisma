// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
	id 									Int					@id @default(autoincrement())

	email 							String 			@unique
	hash 								String
	hashedRt 						String?
	username 						String
	firstname 					String?
	lastname  					String?
	role								UserRole		@default(CITIZEN)
	acceptRgpd 					Boolean			@default(false)
	relations						Relation[] 	@relation(name: "relations")
	relationRequests		Relation[] 	@relation(name: "requests")
	resources						Resource[] 	@relation(name: "resources")
	avatar							String			@default("default.png")
	comments						Comment[]		@relation(name: "a_comments")
	favorites						Resource[]		@relation(name: "favorites")

	createdAt 					DateTime 		@default(now())
	updatedAt 					DateTime 		@default(now())

	@@map("users")
}

model Relation {
	id 						Int						@id @default(autoincrement())

	participants	User[]				@relation(name: "relations")
	requestToId 	Int
	requestTo 		User 					@relation(name: "requests", fields: [requestToId], references: [id])
	type					RelationType
	isAccepted		Boolean 			@default(false)

	createdAt 		DateTime 			@default(now())
	updatedAt 		DateTime 			@default(now())

	@@map("relations")
}

model Resource {
	id 									Int							@id @default(autoincrement())

	authorId 						Int
	author 							User 						@relation(name: "resources", fields: [authorId], references: [id])
	status							ResourceStatus	@default(PENDING)
	title								String
	cover								String
	content							String					@db.Text()
	tags								String[]
	comments						Comment[]				@relation(name: "r_comments")
	favoriteUsers				User[]					@relation(name: "favorites")

	createdAt 					DateTime 				@default(now())
	updatedAt 					DateTime 				@default(now())

	@@map("resources")
}

model Comment {
	id									Int 						@id @default(autoincrement())

	authorId 						Int
	author 							User 						@relation(name: "a_comments", fields: [authorId], references: [id])
	resourceId					Int
	resource						Resource				@relation(name: "r_comments", fields: [resourceId], references: [id])
	content							String

  childrens  					Comment[] @relation("Comment_Children")
  parent     					Comment?  @relation("Comment_Children", fields: [parent_id], references: [id])
  parent_id 					Int?

	createdAt 					DateTime 				@default(now())

	@@map("comments")
}

enum UserRole {
	SUPER_ADMIN
	ADMIN
	MODERATOR
	CITIZEN
}

enum RelationType {
	FAMILY
	FRIEND
	WORKMATE
	SPOUSE
}

enum ResourceStatus {
	APPROVED
	PENDING
	INACTIVE
}